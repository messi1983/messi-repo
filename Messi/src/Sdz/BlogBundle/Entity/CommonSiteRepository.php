<?php

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CommonSiteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class CommonSiteRepository extends EntityRepository implements SiteRepositoryInterface
{	
    public function getPublishedEntities($nombreParPage, $page, $isAdmin)
    {
		// On déplace la vérification du numéro de page dans cette méthode
		if ($page < 1) {
		  throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
		}
		
		// get all entities
		$query = $this->getAllPublishedEntities();
		
		// On définit l'article à partir duquel commencer la liste
		$query->setFirstResult(($page-1) * $nombreParPage)
		// Ainsi que le nombre d'articles à afficher
			  ->setMaxResults($nombreParPage);
	 
		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
		// (n'oubliez pas le use correspondant en début de fichier)
		return new Paginator($query);
    }
	
	public function getEntities($nombreParPage, $page, $isAdmin)
    {
		if ($page < 1) {
		  throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
		  
		  //$this->get('translator')->trans('parameter.page.invalid')
		}
		
		$query = $this->getAllEntities();
		$query->setFirstResult(($page-1) * $nombreParPage)
			  ->setMaxResults($nombreParPage);
	 
		return new Paginator($query);
    }
	
	/**
	 * Get all entities in Database.
	 * @return all entities.
	 */
	protected abstract function getAllEntities();
	
	/**
	 * Get all published entities in Database.
	 * @return all published entities.
	 */
	protected abstract function getAllPublishedEntities();
}
